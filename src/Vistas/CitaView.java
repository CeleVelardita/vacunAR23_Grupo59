
package Vistas;


import com.toedter.calendar.JTextFieldDateEditor;
import java.sql.Time;
import java.text.SimpleDateFormat;
import java.time.Instant;
import java.time.LocalDate;
import java.time.LocalTime;
import java.time.ZoneId;
import java.util.ArrayList;
import java.util.Date;//necesario para turnos, cudiado con java.sql.Date
import java.util.HashMap;
import java.util.List;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import vacunar23_AccesoADatos.Conexion.CiudadanoData;
import vacunar23_AccesoADatos.Conexion.VacunaData;
import vacunar23_AccesoADatos.Conexion.citaData;
import vacunar23_Entidades.CitaVacunacion;
import vacunar23_Entidades.Ciudadano;
import vacunar23_Entidades.Vacuna;


public class CitaView extends javax.swing.JInternalFrame {

    //declaración de atributos
    private HashMap<Date, Boolean> horariosHabiles;//para control de turnos
    
    //Declaración de atributos
    private DefaultTableModel modeloTabla;//modelo para la tabla
    
    
    private List<Ciudadano> ListaCiudadanos;
    private List<Vacuna> ListaVacunas;
    private List<CitaVacunacion> listarTodasCitas=new ArrayList<>();//para todas las citas todas
    private List<CitaVacunacion>listaCitaXDia;//para listar por dia
    private citaData citaData;
    private VacunaData vacuData;
    private CiudadanoData ciuData;
    private CitaVacunacion citaVac;
    private Vacuna vacuna;

    private Ciudadano ciudadano;
    
    /**para extraer fecha**/
    private Date date=new Date();
    private Instant instant;
    ZoneId zoneId;
     LocalDate turnoDelDia;
    
    //atributos extras para extraer datos de los eventos
    private int dni;
    private int codRefuerzoCita;
    
    
    
    public CitaView() {
        initComponents();
        modeloTabla = (DefaultTableModel) jTableListado.getModel();//despues de esto cargo el armado de cabecera de tabla
        jCheckBoxVerificacion.setEnabled(false);
        jtNombre.setEnabled(false);
       
        dni=00000000;
        ciudadano= new Ciudadano();
        
        vacuna=new Vacuna();
        vacuData= new VacunaData();
        
         ciuData= new CiudadanoData();
         citaVac= new CitaVacunacion();
        
         
         // Deshabilita la edición del campo de texto
            JTextFieldDateEditor dateEditor = (JTextFieldDateEditor) jCalendarCita.getDateEditor();
            dateEditor.setEditable(false);
            JTextFieldDateEditor tipeojdcListarXDia= (JTextFieldDateEditor) jdcListarXDia.getDateEditor();
            tipeojdcListarXDia.setEditable(false);
        ///Necesario para los turnos:
        
        //carga de combobox   
        // turno mañana
        for (int i = 8; i <= 12; i++) {
            jComboBoxHorarios.addItem(i + ":00");
            jComboBoxHorarios.addItem(i + ":15");
            jComboBoxHorarios.addItem(i + ":30");
            jComboBoxHorarios.addItem(i + ":45");
        }

        // turno tarde
        for (int i = 16; i <= 20; i++) {
            jComboBoxHorarios.addItem(i + ":00");
            jComboBoxHorarios.addItem(i + ":15");
            jComboBoxHorarios.addItem(i + ":30");
            jComboBoxHorarios.addItem(i + ":45");
        }
        
        //control de horas y dias disponibles
        horariosHabiles = new HashMap<>();
        horariosHabiles.put(new Date(), true);
        horariosHabiles.put(new Date(new Date().getTime() + 86400000), true);
        horariosHabiles.put(new Date(new Date().getTime() + 172800000), true);

        
        turnosPordia();//tabla con turnos segun dia
    }

    
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLNombre = new javax.swing.JLabel();
        jLDNI = new javax.swing.JLabel();
        jLCodigoRefuerzo = new javax.swing.JLabel();
        jtNombre = new javax.swing.JTextField();
        jtDNI = new javax.swing.JTextField();
        jComboBoxHorarios = new javax.swing.JComboBox<>();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        jBotonGuardarCita = new javax.swing.JButton();
        jComboBoxRefuerzo = new javax.swing.JComboBox<>();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTableListado = new javax.swing.JTable();
        jBotonBuscar = new javax.swing.JButton();
        jLListarXDia = new javax.swing.JLabel();
        jdcListarXDia = new com.toedter.calendar.JDateChooser();
        jLBuscarXDni = new javax.swing.JLabel();
        jtBuscarxDni = new javax.swing.JTextField();
        jLModificarEstado = new javax.swing.JLabel();
        jComboBox4 = new javax.swing.JComboBox<>();
        jBotonAplicarEstado = new javax.swing.JButton();
        jBuscarDni = new javax.swing.JButton();
        jCheckBoxVerificacion = new javax.swing.JCheckBox();
        jLabel2 = new javax.swing.JLabel();
        jComboBoxListaVacunas = new javax.swing.JComboBox<>();
        jCalendarCita = new com.toedter.calendar.JDateChooser();
        jButton1 = new javax.swing.JButton();

        setClosable(true);
        setMaximizable(true);
        setResizable(true);
        setName("Cita para Vacunación"); // NOI18N
        setPreferredSize(new java.awt.Dimension(1511, 993));

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jLabel1.setText("Cita para Vacunación");

        jLNombre.setText("Nombre y Apellido: ");
        jLNombre.setHorizontalTextPosition(javax.swing.SwingConstants.LEFT);

        jLDNI.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLDNI.setText("DNI del Ciudadano: ");

        jLCodigoRefuerzo.setText("Código de Refuerzo:");

        jtNombre.setEditable(false);

        jLabel10.setText("Seleccione Fecha Para La Cita: ");
        jLabel10.setHorizontalTextPosition(javax.swing.SwingConstants.LEFT);

        jLabel11.setText("Seleccione El Horario: ");

        jBotonGuardarCita.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jBotonGuardarCita.setText("Guardar Cita");
        jBotonGuardarCita.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBotonGuardarCitaActionPerformed(evt);
            }
        });

        jTableListado.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jTableListado.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Cod. Cita", "Ciudadano", "DNI", "Patología Base", "Fecha del Turno", "Horario", "Vacuna", "Nro. Serie Vacuna", "Cod. Refuerzo", "Centro Vacunacion", "Estado de Cita"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTableListado.getTableHeader().setReorderingAllowed(false);
        jScrollPane1.setViewportView(jTableListado);
        if (jTableListado.getColumnModel().getColumnCount() > 0) {
            jTableListado.getColumnModel().getColumn(0).setResizable(false);
            jTableListado.getColumnModel().getColumn(1).setResizable(false);
            jTableListado.getColumnModel().getColumn(2).setResizable(false);
            jTableListado.getColumnModel().getColumn(3).setResizable(false);
            jTableListado.getColumnModel().getColumn(4).setResizable(false);
            jTableListado.getColumnModel().getColumn(5).setResizable(false);
            jTableListado.getColumnModel().getColumn(6).setResizable(false);
            jTableListado.getColumnModel().getColumn(7).setResizable(false);
            jTableListado.getColumnModel().getColumn(8).setResizable(false);
            jTableListado.getColumnModel().getColumn(9).setResizable(false);
            jTableListado.getColumnModel().getColumn(10).setResizable(false);
        }

        jBotonBuscar.setText("Buscar ");
        jBotonBuscar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBotonBuscarActionPerformed(evt);
            }
        });

        jLListarXDia.setText("Listar Cita según calendario");

        jLBuscarXDni.setText("Buscar Cita por DNI:");

        jLModificarEstado.setText("Modificar Estado De La Cita:");

        jBotonAplicarEstado.setText("Aplicar Estado");

        jBuscarDni.setText("Buscar");
        jBuscarDni.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBuscarDniActionPerformed(evt);
            }
        });

        jCheckBoxVerificacion.setText("Encontrado");

        jLabel2.setText("Vacuna: ");
        jLabel2.setHorizontalTextPosition(javax.swing.SwingConstants.LEFT);

        jCalendarCita.setToolTipText("dd/MM/yyyy");
        jCalendarCita.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                jCalendarCitaPropertyChange(evt);
            }
        });

        jButton1.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jButton1.setText("Listar Todas Las Citas");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(0, 257, Short.MAX_VALUE)
                        .addComponent(jLDNI)
                        .addGap(18, 18, 18)
                        .addComponent(jtDNI, javax.swing.GroupLayout.PREFERRED_SIZE, 181, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jBuscarDni)
                        .addGap(18, 18, 18)
                        .addComponent(jCheckBoxVerificacion)
                        .addGap(14, 14, 14))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(134, 134, 134)
                                .addComponent(jLabel2)
                                .addGap(21, 21, 21))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                .addComponent(jLNombre)
                                .addGap(18, 18, 18)))
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jtNombre)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jComboBoxListaVacunas, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGap(32, 32, 32)
                                .addComponent(jLCodigoRefuerzo)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jComboBoxRefuerzo, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addGap(334, 334, 334)
                .addComponent(jBotonGuardarCita, javax.swing.GroupLayout.PREFERRED_SIZE, 139, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(264, 264, 264))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane1))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(497, 497, 497)
                        .addComponent(jLabel1)
                        .addGap(0, 727, Short.MAX_VALUE)))
                .addContainerGap())
            .addComponent(jSeparator1)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(35, 35, 35)
                        .addComponent(jLabel10)
                        .addGap(18, 18, 18)
                        .addComponent(jCalendarCita, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(107, 107, 107)
                        .addComponent(jLabel11)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jComboBoxHorarios, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(50, 50, 50)
                        .addComponent(jButton1)
                        .addGap(45, 45, 45)
                        .addComponent(jLListarXDia)
                        .addGap(21, 21, 21)
                        .addComponent(jdcListarXDia, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(98, 98, 98)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLBuscarXDni)
                            .addComponent(jtBuscarxDni)
                            .addComponent(jBotonBuscar, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(165, 165, 165)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLModificarEstado, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jComboBox4, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jBotonAplicarEstado, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(0, 0, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addGap(39, 39, 39)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jtDNI, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jBuscarDni)
                    .addComponent(jCheckBoxVerificacion)
                    .addComponent(jLDNI))
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(55, 55, 55)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2)
                            .addComponent(jBotonGuardarCita, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jComboBoxListaVacunas, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLCodigoRefuerzo)
                            .addComponent(jComboBoxRefuerzo, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(28, 28, 28)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jtNombre, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLNombre))))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel10)
                    .addComponent(jLabel11)
                    .addComponent(jComboBoxHorarios, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jCalendarCita, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(22, 22, 22)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 11, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(jdcListarXDia, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLBuscarXDni)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jtBuscarxDni, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jBotonBuscar))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLModificarEstado)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jComboBox4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jBotonAplicarEstado)))
                        .addGap(18, 18, 18)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 246, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jLListarXDia))
                .addContainerGap(306, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    
    
    ///boton Guardar Cita
    private void jBotonGuardarCitaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBotonGuardarCitaActionPerformed
        try{
           
           // Obtén la fecha seleccionada del componente JDateChooser
            Date fechaSeleccionadaDate = jCalendarCita.getDate();

            // Convierte la fecha a LocalDate
            LocalDate fechaSeleccionada = fechaSeleccionadaDate.toInstant().atZone(ZoneId.systemDefault()).toLocalDate();
            
            
            ///-------obtengo la hora:
            
            // Obtener la hora seleccionada del combobox
            String horaSeleccionada = (String) jComboBoxHorarios.getSelectedItem();

            // Dividir la cadena en horas y minutos
            String[] partesHora = horaSeleccionada.split(":");
            int horas = Integer.parseInt(partesHora[0]);
            int minutos = Integer.parseInt(partesHora[1]);

            // Crear un objeto LocalTime
            LocalTime localTime = LocalTime.of(horas, minutos);
            
            System.out.println("hora del combobox"+localTime);
            
            

            // Convertir el número a int
            codRefuerzoCita = Integer.parseInt((String) jComboBoxRefuerzo.getSelectedItem());
            
            System.out.println("codigo refuerzo: "+codRefuerzoCita);
            
            //obtengo vacuna seleccionada:
            vacuna= (Vacuna) jComboBoxListaVacunas.getSelectedItem();
            
            /*ahora armo la cita y la mando a la BDm por metodo cargar luego imprimo en tabla*/
            /*CitaVacunacion(, Ciudadano ciudadano)*/
           
            Ciudadano ciudadanoNew =ciuData.buscarCiudadano(dni);
            vacuna=vacuData.buscarPorNroSerie(vacuna.getNroSerie());
            citaData=new citaData();
            
            citaVac = new CitaVacunacion( fechaSeleccionada,  ciudadanoNew.getDistrito(),
                                         localTime,  vacuna,  codRefuerzoCita,
                                         ciudadanoNew,  "Activa");
    
            
            
            System.out.println(" cita "+citaVac);
            
            
            
            citaData.cargarCita(citaVac);//cargo a la BD
            
//            citaVac=citaData.buscarCitaXDNI(dni);//obtengo el codigo que colocó la bd
            
            //ahora la tambla
             borrarFilaDeTabla();
             
             modeloTabla.addRow(new Object[]{citaVac.getCodCita(),citaVac.getCiudadano().getNombreCompleto(),
                                citaVac.getCiudadano().getDni(),citaVac.getCiudadano().getPatologia(),
                                citaVac.getFechaHoraCita(),citaVac.getFechaHoraColoca(),
                                citaVac.getVacuna().getMarca(),citaVac.getVacuna().getNroSerie(),
                                citaVac.getCodRefuerzo(),citaVac.getCiudadano().getDistrito(),
                                citaVac.getEstado()});
             
              
            
        }catch(NumberFormatException e){
            JOptionPane.showMessageDialog(null,"Problemas en el DNI "+e.getLocalizedMessage());
        }
    }//GEN-LAST:event_jBotonGuardarCitaActionPerformed

    private void jBuscarDniActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBuscarDniActionPerformed

        try{
            dni=Integer.parseInt(jtDNI.getText());//aplicar controles
            System.out.println("dni ingresado: "+dni);
            

            System.out.println("pasó el if");
            ciudadano=ciuData.buscarCiudadano(dni);
            System.out.println("devolvió el ciudadano");
            System.out.println("nombre ciudadano "+ciudadano.getNombreCompleto());
            jComboBoxRefuerzo.removeAll();
        if(ciudadano!=null){
            jCheckBoxVerificacion.setSelected(true);
               
                //cargo refuerzo
               int codRefuerzo= ciudadano.getCodRefuerzo();
               jtNombre.setText(ciudadano.getNombreCompleto());
               if(codRefuerzo==0){
                   jComboBoxRefuerzo.removeAll();
                   jComboBoxRefuerzo.addItem("1");                   
               }else{
                   if(codRefuerzo==1){
                       jComboBoxRefuerzo.removeAll();
                       jComboBoxRefuerzo.addItem("2");                 
                   }else{
                       if(codRefuerzo==2){
                           jComboBoxRefuerzo.removeAll();
                        jComboBoxRefuerzo.addItem("3");
                       }else{
                           System.out.println("ya tiene los 3 refuerzos");
                           JOptionPane.showMessageDialog(null, "El Ciudadano Ya tiene los 3 Refuerzos");
                       }
                   }                  
               }              
               //cargo vacunas
                   
               ListaVacunas=vacuData.listarVacunasNoAplic();
               jComboBoxListaVacunas.addItem(null);
               for(Vacuna vac: ListaVacunas){
                   System.out.println("vacuna de la lista "+vac);
                   
                   jComboBoxListaVacunas.addItem(vac);
                    
               }
               if(jComboBoxListaVacunas.getSelectedItem()!=null || jComboBoxListaVacunas.getSelectedItem()!="Seleccione vacuna:" ){
                   vacuna= (Vacuna) jComboBoxListaVacunas.getSelectedItem();
               }
               
                //----ya tengo todo, tomo los datos, creo la cita y la cargo en boton evento  guardar
     
           }else{
               jCheckBoxVerificacion.setSelected(false);
           }
        
        }catch(NumberFormatException e){
            JOptionPane.showMessageDialog(null,"DNI no encontrado"+e.getMessage());
        }
    }//GEN-LAST:event_jBuscarDniActionPerformed

    private void jCalendarCitaPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_jCalendarCitaPropertyChange
       /*
        Este código añadirá un escuchador de eventos de propiedad al JCalendar.
        El escuchador de eventos de propiedad se invocará cada vez que
        se cambie una propiedad del JCalendar.
        En este caso, el escuchador de eventos de propiedad comprobará
        si la propiedad date ha cambiado. Si ha cambiado, el código comprobará
        si el horario seleccionado está disponible.
        Si no lo está, el día seleccionado en el calendario se deshabilitará.
        */
//        if (evt.getPropertyName().equals("date")) {
//            String horario = (String) jComboBoxHorarios.getSelectedItem();
//
//            if (!horariosHabiles.get(jCalendarCita.getDate())) {
//                jCalendarCita.setDate(null);
//            }
//        }
    }//GEN-LAST:event_jCalendarCitaPropertyChange

    private void jBotonBuscarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBotonBuscarActionPerformed
        
        try{
            int jtdni=Integer.parseInt(jtBuscarxDni.getText());
            borrarFilaDeTabla();
            System.out.println("dni ingresado "+jtdni);
            CitaVacunacion CitaXDni= citaData.buscarCitaXDNI(jtdni);
            System.out.println("cita "+CitaXDni);
             if(CitaXDni!=null){
                 modeloTabla.addRow(new Object[]{CitaXDni.getCodCita(),CitaXDni.getCiudadano().getNombreCompleto(),
                                    CitaXDni.getCiudadano().getDni(),CitaXDni.getCiudadano().getPatologia(),
                                    CitaXDni.getFechaHoraCita(),CitaXDni.getFechaHoraColoca(),
                                    CitaXDni.getVacuna().getMarca(),CitaXDni.getVacuna().getNroSerie(),
                                    CitaXDni.getCodRefuerzo(),CitaXDni.getCiudadano().getDistrito(),
                                    CitaXDni.getEstado()});
             }else{
                 JOptionPane.showMessageDialog(null, "no se registra el dni en los turnos");
             }
        }catch(NullPointerException ex){
            JOptionPane.showMessageDialog(null, "no extiste cita para éste dni");
        }
    }//GEN-LAST:event_jBotonBuscarActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
    
        citaData=new citaData();
        listarTodasCitas=citaData.listarCitas();
   
        if(listarTodasCitas!=null){
            borrarFilaDeTabla();
            for(CitaVacunacion citas: listarTodasCitas){
                modeloTabla.addRow(new Object[]{citas.getCodCita(),citas.getCiudadano().getNombreCompleto(),
                                citas.getCiudadano().getDni(),citas.getCiudadano().getPatologia(),
                                citas.getFechaHoraCita(),citas.getFechaHoraColoca(),
                                citas.getVacuna().getMarca(),citas.getVacuna().getNroSerie(),
                                citas.getCodRefuerzo(),citas.getCiudadano().getDistrito(),
                                citas.getEstado()});
            }
        }else{
            JOptionPane.showMessageDialog(null, "NO HAY CITAS EN LA BASE DE DATOS");
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    

    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jBotonAplicarEstado;
    private javax.swing.JButton jBotonBuscar;
    private javax.swing.JButton jBotonGuardarCita;
    private javax.swing.JButton jBuscarDni;
    private javax.swing.JButton jButton1;
    private com.toedter.calendar.JDateChooser jCalendarCita;
    private javax.swing.JCheckBox jCheckBoxVerificacion;
    private javax.swing.JComboBox<String> jComboBox4;
    private javax.swing.JComboBox<String> jComboBoxHorarios;
    private javax.swing.JComboBox<Vacuna> jComboBoxListaVacunas;
    private javax.swing.JComboBox<String> jComboBoxRefuerzo;
    private javax.swing.JLabel jLBuscarXDni;
    private javax.swing.JLabel jLCodigoRefuerzo;
    private javax.swing.JLabel jLDNI;
    private javax.swing.JLabel jLListarXDia;
    private javax.swing.JLabel jLModificarEstado;
    private javax.swing.JLabel jLNombre;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JTable jTableListado;
    private com.toedter.calendar.JDateChooser jdcListarXDia;
    private javax.swing.JTextField jtBuscarxDni;
    private javax.swing.JTextField jtDNI;
    private javax.swing.JTextField jtNombre;
    // End of variables declaration//GEN-END:variables

//-------------------------------_Métodos_-------------------------------//


  /*-----cabeceras de la tabla-----*/
    /*
    del constructor de citaVacunacion
    public CitaVacunacion(int codCita, LocalDate fechaHoraCita, String centroVacunacion, LocalDate fechaHoraColoca, Vacuna vacuna, int codRefuerzo, Ciudadano ciudadano, String estado) {
        this.codCita = codCita;
        this.fechaHoraCita = fechaHoraCita;
        this.centroVacunacion = centroVacunacion;
        this.fechaHoraColoca = fechaHoraColoca;
        this.vacuna = vacuna;
        this.codRefuerzo = codRefuerzo;
        this.ciudadano = ciudadano;
        this.estado = estado;
    }
    */
        public void armarCabeceraTabla(){    
                modeloTabla.addColumn("cod. Cita");
                modeloTabla.addColumn("Ciudadano");//nombre completo 
                modeloTabla.addColumn("DNI"); 
                modeloTabla.addColumn("Patología Base");
                modeloTabla.addColumn("fecha Colocación");
                modeloTabla.addColumn("turno");//hora
                modeloTabla.addColumn("vacuna");
                modeloTabla.addColumn("codRefuerzo");//1º 2º 3º
                modeloTabla.addColumn("centroVacunacion");
                modeloTabla.addColumn("Estado de la Cita");//Activa, Cumplida, Cancelada, Vencida
                jTableListado.setModel(modeloTabla);
        }  
    
    //borra/setea la tabla
        private void borrarFilaDeTabla(){
            int indice = modeloTabla.getRowCount() -1;
            for(int i = indice ; i >= 0 ; i--){
                modeloTabla.removeRow(i);           
            }
        } 
    
        
 
        
        
//    Metodo para actualizar tabla segun dia     // 
   private void turnosPordia(){
       borrarFilaDeTabla();
        date = jdcListarXDia.getDate(); // Obtener la fecha seleccionada en formato java.util.Date
       if(date!=null){
            instant =date.toInstant(); // Convertir a Instant
            ZoneId zoneId = ZoneId.systemDefault(); // Obtener la zona horaria por defecto
            turnoDelDia = instant.atZone(zoneId).toLocalDate(); // Convertir a LocalDate ya tengo lo que seleciionó el usuario

            listaCitaXDia=citaData.listarCitasXDia(turnoDelDia);
             if(listaCitaXDia!=null){
                 for(CitaVacunacion cit: listaCitaXDia){
                 modeloTabla.addRow(new Object[]{cit.getCodCita(),cit.getCiudadano().getNombreCompleto(),
                                    cit.getCiudadano().getDni(),cit.getCiudadano().getPatologia(),
                                    cit.getFechaHoraCita(),cit.getFechaHoraColoca(),
                                    cit.getVacuna().getMarca(),cit.getVacuna().getNroSerie(),
                                    cit.getCodRefuerzo(),cit.getCiudadano().getDistrito(),
                                    cit.getEstado()});
                }
             }else{
                 JOptionPane.showMessageDialog(null, "no hay citas para la fecha que seleccionó");
             }
        }
  
   }
}
