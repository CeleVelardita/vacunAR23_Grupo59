
package Vistas;


import java.time.Instant;
import java.time.LocalDate;
import java.time.LocalTime;
import java.time.ZoneId;
import java.time.ZonedDateTime;
import java.util.ArrayList;
import java.util.Date;//necesario para turnos, cudiado con java.sql.Date
import java.util.HashMap;
import java.util.List;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import vacunar23_AccesoADatos.Conexion.CiudadanoData;
import vacunar23_AccesoADatos.Conexion.VacunaData;
import vacunar23_AccesoADatos.Conexion.citaData;
import vacunar23_Entidades.CitaVacunacion;
import vacunar23_Entidades.Ciudadano;
import vacunar23_Entidades.Vacuna;


public class CitaView extends javax.swing.JInternalFrame {

    //declaración de atributos
    private HashMap<Date, Boolean> horariosHabiles;//para control de turnos
    
    //Declaración de atributos
    private DefaultTableModel modeloTabla;//modelo para la tabla
    
    private List<Ciudadano> ListaCiudadanos;
    private List<Vacuna> ListaVacunas;
    private List<CitaVacunacion> listaCitas;
    private citaData citaData;
    private CitaVacunacion citaVac;
    private Ciudadano ciudadano;
    private CiudadanoData ciuData;
    private Vacuna vacuna;
    
    private VacunaData vacuData;
    private int codigoCIta;
    private int selectedRow;
    private Object valorCelda;
    
    
    
    public CitaView() {
        initComponents();
        modeloTabla = (DefaultTableModel) jTableListado.getModel();//despues de esto cargo el armado de cabecera de tabla
        jCheckBoxVerificacion.setEnabled(false);//para que no sea editable el checkbox de buscar ciudadano para cita
        jtNombre.setEnabled(false);
        cargarComboboxVacunas();
        
        
        
        
        ///Necesario para los turnos:
        
        //carga de combobox   
        // turno mañana
        for (int i = 8; i <= 12; i++) {
            jComboBoxHorarios.addItem(i + ":00");
            jComboBoxHorarios.addItem(i + ":15");
            jComboBoxHorarios.addItem(i + ":30");
            jComboBoxHorarios.addItem(i + ":45");
        }

        // turno tarde
        for (int i = 16; i <= 20; i++) {
            jComboBoxHorarios.addItem(i + ":00");
            jComboBoxHorarios.addItem(i + ":15");
            jComboBoxHorarios.addItem(i + ":30");
            jComboBoxHorarios.addItem(i + ":45");
        }
        
        //control de horas y dias disponibles
        horariosHabiles = new HashMap<>();
        horariosHabiles.put(new Date(), true);
        horariosHabiles.put(new Date(new Date().getTime() + 86400000), true);
        horariosHabiles.put(new Date(new Date().getTime() + 172800000), true);
        
        
        jdcListarXDia.setDateFormatString("dd/MM/yyyy");//formato fecha
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLNombre = new javax.swing.JLabel();
        jLDNI = new javax.swing.JLabel();
        jLCodigoRefuerzo = new javax.swing.JLabel();
        jtNombre = new javax.swing.JTextField();
        jtDNI = new javax.swing.JTextField();
        jComboBoxHorarios = new javax.swing.JComboBox<>();
        jLabel10 = new javax.swing.JLabel();
        jCalendarCita = new com.toedter.calendar.JCalendar();
        jLabel11 = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        jBotonGuardarCita = new javax.swing.JButton();
        jComboBoxRefuerzo = new javax.swing.JComboBox<>();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTableListado = new javax.swing.JTable();
        jBotonBuscarCita = new javax.swing.JButton();
        jLListarXDia = new javax.swing.JLabel();
        jdcListarXDia = new com.toedter.calendar.JDateChooser();
        jLBuscarXDni = new javax.swing.JLabel();
        jTBuscarCita = new javax.swing.JTextField();
        jLModificarEstado = new javax.swing.JLabel();
        jComboBoxEstado = new javax.swing.JComboBox<>();
        jBotonAplicarEstado = new javax.swing.JButton();
        jBuscarDni = new javax.swing.JButton();
        jCheckBoxVerificacion = new javax.swing.JCheckBox();
        jLabel2 = new javax.swing.JLabel();
        jComboBoxVacuna = new javax.swing.JComboBox<>();

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        jLabel1.setText("Cita para Vacunación");

        jLNombre.setText("Nombre y Apellido: ");

        jLDNI.setText("DNI del Ciudadano: ");

        jLCodigoRefuerzo.setText("Código de Refuerzo");

        jLabel10.setText("Seleccione Fecha Para La Cita: ");

        jCalendarCita.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                jCalendarCitaPropertyChange(evt);
            }
        });

        jLabel11.setText("Seleccione El Horario: ");

        jBotonGuardarCita.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jBotonGuardarCita.setText("Guardar Cita");
        jBotonGuardarCita.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBotonGuardarCitaActionPerformed(evt);
            }
        });

        jTableListado.setAutoCreateRowSorter(true);
        jTableListado.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Cod. Cita", "Ciudadano", "DNI", "Patología Base", "Fecha Colocación", "Turno", "Vacuna", "Nro.Serie Vacuna", "Cod.Refuerzo", "Centro Vacunacion", "Estado de la Cita"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTableListado.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTableListadoMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jTableListado);

        jBotonBuscarCita.setText("Buscar ");
        jBotonBuscarCita.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBotonBuscarCitaActionPerformed(evt);
            }
        });

        jLListarXDia.setText("Listar Cita según calendario");

        jdcListarXDia.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                jdcListarXDiaPropertyChange(evt);
            }
        });

        jLBuscarXDni.setText("Buscar Cita por DNI:");

        jLModificarEstado.setText("Modificar Estado De La Cita:");

        jBotonAplicarEstado.setText("Aplicar Estado");
        jBotonAplicarEstado.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBotonAplicarEstadoActionPerformed(evt);
            }
        });

        jBuscarDni.setText("Buscar");
        jBuscarDni.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBuscarDniActionPerformed(evt);
            }
        });

        jCheckBoxVerificacion.setText("Encontrado");

        jLabel2.setText("Vacuna: ");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jSeparator1))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(33, 33, 33)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel10)
                        .addGap(18, 18, 18)
                        .addComponent(jCalendarCita, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLNombre)
                        .addGap(34, 34, 34)
                        .addComponent(jtNombre))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLDNI)
                        .addGap(31, 31, 31)
                        .addComponent(jtDNI, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jBuscarDni)
                        .addGap(18, 18, 18)
                        .addComponent(jCheckBoxVerificacion))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addGap(18, 18, 18)
                        .addComponent(jComboBoxVacuna, javax.swing.GroupLayout.PREFERRED_SIZE, 141, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLCodigoRefuerzo)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jComboBoxRefuerzo, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(32, 32, 32)
                        .addComponent(jLabel11)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jComboBoxHorarios, javax.swing.GroupLayout.PREFERRED_SIZE, 61, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jBotonGuardarCita, javax.swing.GroupLayout.PREFERRED_SIZE, 145, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(146, 146, 146))))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(359, 359, 359)
                .addComponent(jLabel1)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(30, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 1005, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLListarXDia)
                        .addGap(18, 18, 18)
                        .addComponent(jdcListarXDia, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(89, 89, 89)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jBotonBuscarCita, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLBuscarXDni)
                            .addComponent(jTBuscarCita, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(75, 75, 75)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLModificarEstado, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jComboBoxEstado, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jBotonAplicarEstado, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 13, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLDNI)
                    .addComponent(jtDNI, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jBuscarDni)
                    .addComponent(jCheckBoxVerificacion))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLNombre)
                    .addComponent(jtNombre, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(6, 6, 6)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jComboBoxRefuerzo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLCodigoRefuerzo)
                    .addComponent(jLabel2)
                    .addComponent(jComboBoxVacuna, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jBotonGuardarCita, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(20, 20, 20)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel10)
                    .addComponent(jCalendarCita, javax.swing.GroupLayout.PREFERRED_SIZE, 181, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel11)
                    .addComponent(jComboBoxHorarios, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jdcListarXDia, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLListarXDia)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLBuscarXDni)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jTBuscarCita, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jBotonBuscarCita))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLModificarEstado)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jComboBoxEstado, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jBotonAplicarEstado)))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 312, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(68, 68, 68))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    ///control del candelario de turnos
    private void jCalendarCitaPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_jCalendarCitaPropertyChange
        /*
        Este código añadirá un escuchador de eventos de propiedad al JCalendar. 
        El escuchador de eventos de propiedad se invocará cada vez que 
        se cambie una propiedad del JCalendar.
        En este caso, el escuchador de eventos de propiedad comprobará 
        si la propiedad date ha cambiado. Si ha cambiado, el código comprobará 
        si el horario seleccionado está disponible. 
        Si no lo está, el día seleccionado en el calendario se deshabilitará.
        */
        if (evt.getPropertyName().equals("date")) {
            String horario = (String) jComboBoxHorarios.getSelectedItem();

            if (!horariosHabiles.get(jCalendarCita.getDate())) {
                jCalendarCita.setDate(null);
            }
        }    
    }//GEN-LAST:event_jCalendarCitaPropertyChange

    
    
    private void jBuscarDniActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBuscarDniActionPerformed
        
        /// Necestido los datos del ciudadano 
        
        //datos ciudadano
        int dni=Integer.parseInt(jtDNI.getText());//aplicar controles
        ciudadano=ciuData.buscarCiudadano(dni);
        
        //si obtengo un ciudadano (lo encuentra en la BD):
        if(ciudadano!=null){
               jCheckBoxVerificacion.setSelected(true);//activo tilde checkbox
               int codRefuerzo= ciudadano.getCodRefuerzo();//recupero el código de refuerzo del ciudadano para verificar cuál le toca
               jtNombre.setText(ciudadano.getNombreCompleto());//seteo el textfield del nombre en la vista
               //seteamos combobox segun la dosis que tenga colocada:
               if(codRefuerzo==0){
                   //si no tiene dosis aplicada
                   jComboBoxRefuerzo.removeAll();//limpia combobox
                   jComboBoxRefuerzo.addItem("1");
                   jComboBoxRefuerzo.addItem("2");
                   jComboBoxRefuerzo.addItem("3");
               }else{
                   //si tiene la 1er dosis
                   if(codRefuerzo==1){
                       jComboBoxRefuerzo.removeAll();
                       jComboBoxRefuerzo.addItem("2");                 
                   }else{
                       //si tiene la 2da dosis
                       jComboBoxRefuerzo.removeAll();
                       jComboBoxRefuerzo.addItem("3");
                   }                   
               }
           }else{
                //si el ciudadano no está en la BD el checkbox queda SIN tilde
               jCheckBoxVerificacion.setSelected(false);
           }
        
        
        
    }//GEN-LAST:event_jBuscarDniActionPerformed

    private void jBotonGuardarCitaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBotonGuardarCitaActionPerformed
        //controlar campos vacios
        try{            
           if(ciudadano!=null && jComboBoxRefuerzo.getSelectedItem()!=null && jCalendarCita.getDate()!= null && jComboBoxHorarios.getSelectedItem()!=null){
               //datos vacuna desde vacunaData
                vacuna=(Vacuna) jComboBoxVacuna.getSelectedItem();//ver si es correcto


                //recupero el refuerzo elegido en el checkbox
                int dosisRefuerzo= Integer.parseInt((String) jComboBoxRefuerzo.getSelectedItem());//ver si es correcto



                ///obtengo la fecha elegida para el turno
                // Para obtener la fecha seleccionada del JCalendar y almacenarla en fechaElegida
                Date selectedDate = jCalendarCita.getDate(); // Obtiene la fecha seleccionada como objeto Date
                // Convierte el objeto Date a LocalDate 
                Instant instant = selectedDate.toInstant();
                ZonedDateTime zonedDateTime = instant.atZone(ZoneId.systemDefault());
                LocalDate fechaElegida = zonedDateTime.toLocalDate();

                ///rescato el horario elegido
                LocalTime horaTurno=(LocalTime) jComboBoxHorarios.getSelectedItem(); //// capaz deba dar formato a la hora!!!!!!!!!!!!

                //tengo todos los datos, debo dárselos a mi objeto citaVac (clase CitaVacunacion) por medio de su constructor
                //luego usar mi citaData para acceder al método de cargar la cita, lé envío citaVac para cargarla a la BD
                citaVac= new CitaVacunacion( fechaElegida, horaTurno, vacuna, dosisRefuerzo, ciudadano, "PorColocar");

                //ya tengo la cita, debo mandarla por el método de citaData para almacenarla en la BD
                citaData.cargarCita(citaVac);
                //seteo campos
                setearCampos();
               
           }else{
               if(ciudadano!=null){
                   JOptionPane.showMessageDialog(null, "No se permiten campos vacíos");
               }
           }
           setearCampos();
        }catch(){
            
        }

    }//GEN-LAST:event_jBotonGuardarCitaActionPerformed
///buscar cita por dni
    private void jBotonBuscarCitaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBotonBuscarCitaActionPerformed
        
        int dni=Integer.parseInt(jTBuscarCita.getText());
        if(dni>5000000){
            citaVac=citaData.buscarCitaXDNI(dni);
            if(citaVac!=null){
                //limpio la tabla
                borrarFilaDeTabla();

                //imprimo en tabla 
                 modeloTabla.addRow(new Object []{citaVac.getCodCita(), citaVac.getCiudadano()
                , citaVac.getCiudadano().getDni(), citaVac.getCiudadano().getPatologia()
                , citaVac.getFechaHoraCita(), citaVac.getHorarioTurno()
                , citaVac.getVacuna().getMarca(),citaVac.getVacuna().getNroSerie()
                , citaVac.getCodRefuerzo(), citaVac.getCentroVacunacion()
                , citaVac.getEstado()});
            }
            
        }else{
            JOptionPane.showMessageDialog(null, "Ingrese dni correctamente y no deje campos vacíos");
        }
    }//GEN-LAST:event_jBotonBuscarCitaActionPerformed

    private void jdcListarXDiaPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_jdcListarXDiaPropertyChange
        Date fechaSeleccionadaDate = jdcListarXDia.getDate();
        
        if (fechaSeleccionadaDate != null) {
            // Convierte Date a LocalDate
            Instant instant = fechaSeleccionadaDate.toInstant();
            LocalDate fechaSeleccionada = instant.atZone(ZoneId.systemDefault()).toLocalDate();

            // Ahora puedes trabajar con la fecha en formato LocalDate
            System.out.println("Fecha seleccionada: " + fechaSeleccionada);
            
            
            //debo mandar la fecha a citaData y que el método me devuelva la lista de citas de esa fecha
            listaCitas=citaData.buscarCitaXFecha(fechaSeleccionada);
            
            if(listaCitas!=null){
                //limpio la tabla
                borrarFilaDeTabla();
                for(CitaVacunacion cita: listaCitas){
                    //imprimo en tabla 
                        modeloTabla.addRow(new Object []{cita.getCodCita(), cita.getCiudadano()
                        , cita.getCiudadano().getDni(), cita.getCiudadano().getPatologia()
                        , cita.getFechaHoraCita(), cita.getHorarioTurno()
                        , cita.getVacuna().getMarca(),cita.getVacuna().getNroSerie()
                        , cita.getCodRefuerzo(), cita.getCentroVacunacion()
                        , cita.getEstado()});
                }
            }
            
        } else {
            // El usuario no ha seleccionado una fecha
            System.out.println("Por favor, seleccione una fecha");
        }
        
        
    }//GEN-LAST:event_jdcListarXDiaPropertyChange

    private void jTableListadoMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTableListadoMouseClicked
        selectedRow = jTableListado.getSelectedRow();//tomo fila seleccionada
        if (selectedRow >= 0) {
            // Habilita el JComboBoxEstado y configura las opciones
            jComboBoxEstado.setEnabled(true);
            jComboBoxEstado.removeAllItems();
            jComboBoxEstado.addItem("Activa");
            jComboBoxEstado.addItem("Cumplida");
            jComboBoxEstado.addItem("Cancelada");
            jComboBoxEstado.addItem("Vencida");
            valorCelda = jTableListado.getValueAt(selectedRow, 10);
                       
        } 
    }//GEN-LAST:event_jTableListadoMouseClicked

    private void jBotonAplicarEstadoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBotonAplicarEstadoActionPerformed
        // Puedes establecer el valor seleccionado en función de la columna 10 en la fila seleccionada
            // valorCelda es la celda del Estado de la fila seleccionada en la tabla
            if (valorCelda instanceof String) {
                String estadoCita = (String) valorCelda;
                String EstadoSeleccionado= (String) jComboBoxEstado.getSelectedItem();
                citaData.estadoCita(codigoCIta, EstadoSeleccionado);//aplico el nuevo estado a la cita en la BD
                
                
                jComboBoxEstado.setEnabled(false);
            }
    }//GEN-LAST:event_jBotonAplicarEstadoActionPerformed

    

    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jBotonAplicarEstado;
    private javax.swing.JButton jBotonBuscarCita;
    private javax.swing.JButton jBotonGuardarCita;
    private javax.swing.JButton jBuscarDni;
    private com.toedter.calendar.JCalendar jCalendarCita;
    private javax.swing.JCheckBox jCheckBoxVerificacion;
    private javax.swing.JComboBox<String> jComboBoxEstado;
    private javax.swing.JComboBox<String> jComboBoxHorarios;
    private javax.swing.JComboBox<String> jComboBoxRefuerzo;
    private javax.swing.JComboBox<Object> jComboBoxVacuna;
    private javax.swing.JLabel jLBuscarXDni;
    private javax.swing.JLabel jLCodigoRefuerzo;
    private javax.swing.JLabel jLDNI;
    private javax.swing.JLabel jLListarXDia;
    private javax.swing.JLabel jLModificarEstado;
    private javax.swing.JLabel jLNombre;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JTextField jTBuscarCita;
    private javax.swing.JTable jTableListado;
    private com.toedter.calendar.JDateChooser jdcListarXDia;
    private javax.swing.JTextField jtDNI;
    private javax.swing.JTextField jtNombre;
    // End of variables declaration//GEN-END:variables

    
    
//-------------------------------_Métodos_-------------------------------//


    /*-----cabeceras de la tabla-----*/
    /*
    del constructor de citaVacunacion
    public CitaVacunacion(int codCita, LocalDate fechaHoraCita, String centroVacunacion, LocalDate fechaHoraColoca, Vacuna vacuna, int codRefuerzo, Ciudadano ciudadano, String estado) {
        this.codCita = codCita;
        this.fechaHoraCita = fechaHoraCita;
        this.centroVacunacion = centroVacunacion;
        this.fechaHoraColoca = fechaHoraColoca;
        this.vacuna = vacuna;
        this.codRefuerzo = codRefuerzo;
        this.ciudadano = ciudadano;
        this.estado = estado;
    }
    */
    
    //armado de las cabeceras de la tabla (nombres de las columnas)
        public void armarCabeceraTabla(){    
                modeloTabla.addColumn("Cod. Cita");
                modeloTabla.addColumn("Ciudadano");//nombre completo 
                modeloTabla.addColumn("DNI"); 
                modeloTabla.addColumn("Patología Base");
                modeloTabla.addColumn("Fecha Colocación");
                modeloTabla.addColumn("Turno");//hora
                modeloTabla.addColumn("Vacuna");//nombre marca
                modeloTabla.addColumn("Nro.Serie Vacuna");
                modeloTabla.addColumn("Cod. Refuerzo");//1º 2º 3º
                modeloTabla.addColumn("Centro Vacunacion");
                modeloTabla.addColumn("Estado de la Cita");//Activa, Cumplida, Cancelada, Vencida
                jTableListado.setModel(modeloTabla);
        }  
    /*-----actualiza la tabla -----*/
    public void actualizarJTable(CitaVacunacion cita) {
    //limpio la tabla
    borrarFilaDeTabla();
        
    //imprimo en tabla 
     modeloTabla.addRow(new Object []{cita.getCodCita(), cita.getCiudadano()
                        , cita.getCiudadano().getDni(), cita.getCiudadano().getPatologia()
                        , cita.getFechaHoraCita(), cita.getHorarioTurno()
                        , cita.getVacuna().getMarca(),cita.getVacuna().getNroSerie()
                        , cita.getCodRefuerzo(), cita.getCentroVacunacion()
                        , cita.getEstado()});
    }
    
    //borra/setea la tabla
        private void borrarFilaDeTabla(){
            int indice = modeloTabla.getRowCount() -1;
            for(int i = indice ; i >= 0 ; i--){
                modeloTabla.removeRow(i);           
            }
        } 
    //cargar combobox de vacunas desde vacunaData
        private void cargarComboboxVacunas(){
            //vacuna jComboBoxVacuna
            ListaVacunas=vacuData.listarVacunas();
            for(Vacuna vacuna: ListaVacunas){
                jComboBoxVacuna.addItem(vacuna.getMarca());
            }
        }
        
    //setea todos los campos    
    private void setearCampos(){
        jtDNI.setText(" ");
        jCheckBoxVerificacion.setSelected(false);
        jtNombre.setText(" ");
        jComboBoxVacuna.removeAll();
        jComboBoxRefuerzo.removeAll();
        jCalendarCita.setDate(null);        
        jComboBoxHorarios.removeAll();
        jdcListarXDia.removeAll();
        jTBuscarCita.setText(" ");
        jComboBoxEstado.removeAll();
    }
    
    
}
